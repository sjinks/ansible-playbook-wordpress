---
- name: Create site directory
  file: name="{{ getent_passwd[user_name][4] }}/sites/{{ wp_domain }}" state=directory owner={{ user_name }} group={{ user_name }} mode=0755

- name: Download WordPress
  command: /usr/local/bin/wp core download --locale={{ wp_locale|escape }}
  become: yes
  become_user: "{{ user_name }}"
  args:
    chdir: "{{ getent_passwd[user_name][4] }}/sites/{{ wp_domain }}"
    creates: "{{ getent_passwd[user_name][4] }}/sites/{{ wp_domain }}/wp-admin"

- name: Create wp-config.php
  command: /usr/local/bin/wp config create --dbname="{{ mysql_db|escape }}" --dbuser="{{ mysql_user|escape }}" --dbpass="{{ mysql_pass|escape }}"
  become: yes
  become_user: "{{ user_name }}"
  args:
    chdir: "{{ getent_passwd[user_name][4] }}/sites/{{ wp_domain }}"
    creates: "{{ getent_passwd[user_name][4] }}/sites/{{ wp_domain }}/wp-config.php"

- name: Get DB_NAME
  command: /usr/local/bin/wp config get --constant=DB_NAME
  changed_when: False
  become: yes
  become_user: "{{ user_name }}"
  args:
    chdir: "{{ getent_passwd[user_name][4] }}/sites/{{ wp_domain }}"
  register: wp_dbname

- name: Get DB_USER
  command: /usr/local/bin/wp config get --constant=DB_USER
  changed_when: False
  become: yes
  become_user: "{{ user_name }}"
  args:
    chdir: "{{ getent_passwd[user_name][4] }}/sites/{{ wp_domain }}"
  register: wp_dbuser

- name: Get DB_PASSWORD
  command: /usr/local/bin/wp config get --constant=DB_PASSWORD
  changed_when: False
  become: yes
  become_user: "{{ user_name }}"
  args:
    chdir: "{{ getent_passwd[user_name][4] }}/sites/{{ wp_domain }}"
  register: wp_dbpass

- name: Update wp-config.php
  command: /usr/local/bin/wp config create --dbname="{{ mysql_db|escape }}" --dbuser="{{ mysql_user|escape }}" --dbpass="{{ mysql_pass|escape }}" --force
  become: yes
  become_user: "{{ user_name }}"
  args:
    chdir: "{{ getent_passwd[user_name][4] }}/sites/{{ wp_domain }}"
    creates: "{{ getent_passwd[user_name][4] }}/sites/{{ wp_domain }}/wp-config.php"
  when: (mysql_db != wp_dbname.stdout) or (mysql_user != wp_dbuser.stdout) or (mysql_pass != wp_dbpass.stdout)

- name: Check WordPress is installed
  command: /usr/local/bin/wp core is-installed
  failed_when: False
  changed_when: False
  become: yes
  become_user: "{{ user_name }}"
  args:
    chdir: "{{ getent_passwd[user_name][4] }}/sites/{{ wp_domain }}"
  register: wpinstalled

- name: Install WordPress
  command: |
    {% if skip_ssl %}
    /usr/local/bin/wp core install --url="http://{{ wp_domain|escape }}" --title="{{ wp_title|escape }}" --admin_user="{{ wp_admin_name|escape }}" --admin_password="{{ wp_admin_pass|escape }}" --admin_email="{{ wp_admin_email|escape }}" --skip-email
    {% else %}
    /usr/local/bin/wp core install --url="https://{{ wp_domain|escape }}" --title="{{ wp_title|escape }}" --admin_user="{{ wp_admin_name|escape }}" --admin_password="{{ wp_admin_pass|escape }}" --admin_email="{{ wp_admin_email|escape }}" --skip-email
    {% endif %}
  become: yes
  become_user: "{{ user_name }}"
  args:
    chdir: "{{ getent_passwd[user_name][4] }}/sites/{{ wp_domain }}"
  when: wpinstalled.rc != 0

- name: Run handlers
  meta: flush_handlers

- name: Get the SSL certificate
  block:
    - name: Check if /etc/letsencrypt/live/DOMAIN/fullchain.pem exists
      stat: path="/etc/letsencrypt/live/{{ wp_domain }}/fullchain.pem" get_checksum=no get_md5=no get_mime=no
      register: sslkey
    - name: Install the default site
      block:
        - name: Copy site template
          template: src=nginx-domain-certbot.j2 dest="{{ nginx_site_dir }}/{{ wp_domain }}{{ nginx_site_suffix }}" mode=0644 owner=root group=root force=yes
          notify: reload nginx
        - name: Enable the default site
          file: src="{{ nginx_site_dir }}/{{ wp_domain }}{{ nginx_site_suffix }}" dest="/etc/nginx/sites-enabled/{{ wp_domain }}{{ nginx_site_suffix }}" state=link
          notify: reload nginx
          when: nginx_enable_site
        - name: Flush handlers
          meta: flush_handlers
        - name: Install the SSL certificate
          command: certbot certonly --webroot --webroot-path /usr/share/nginx/html -d {{ wp_domain|escape }},www.{{ wp_domain|escape }} --agree-tos --email {{ certbot_email|escape }} --non-interactive --rsa-key-size 4096
      when: sslkey.stat.islnk is not defined
  when: skip_ssl == False

- name: Install nginx vhost
  template: src=nginx-domain.j2 dest="{{ nginx_site_dir }}/{{ wp_domain }}{{ nginx_site_suffix }}" mode=0644 owner=root group=root force=yes
  notify: reload nginx

- name: Enable the vhost
  file: src="{{ nginx_site_dir }}/{{ wp_domain }}{{ nginx_site_suffix }}" dest="/etc/nginx/sites-enabled/{{ wp_domain }}{{ nginx_site_suffix }}" state=link
  when: nginx_enable_site
  notify: reload nginx

- name: Run handlers
  meta: flush_handlers
